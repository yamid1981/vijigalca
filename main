<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Ввод пароля</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        .active {color: green;}
        .inactive {color: orange;}
        .error {color: red;}
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        th {
            cursor: pointer;
            background-color: #f2f2f2;
        }
.tooltip {
    position: absolute;
    top: 3em;
    left: 15em;
    transform: translateX(-50%);
    background-color: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 10px;
    border-radius: 5px;
    opacity: 1;
    transition: opacity 1.2s ease-in-out;
    pointer-events: none;
}
.tooltip.fadeout {
    opacity: 0;
}
        #activeCount,#passiveCount
        {
            display: none;
        }
    </style>
</head>
<body>
    <form id="passwordForm">
        <label for="password">Введите пароль:</label>
        <input type="password" id="password" name="password" required>
        <button type="submit">Отправить</button>
    </form>
    <!-- Добавьте счетчики активных и пассивных клиентов -->
    <p id="activeCount">Активных клиентов: 0</p>
    <p id="passiveCount">Пассивных клиентов: 0</p>
    <div id="clientList"></div>
    <p id="p1">Ответ от сервера:</p>
    <p id="errorMessage" class="error"></p>

    <script>
window.onload = () => {
    document.getElementById('password').focus();
    const tooltip = document.createElement('span');
    tooltip.className = 'tooltip';
    tooltip.textContent = 'Введите пароль';
    document.body.appendChild(tooltip);
    // Через 2.5s начнем исчезновение
    setTimeout(() => {
        tooltip.classList.add('fadeout');
    }, 2500);
    // Удалим из DOM после исчезновения
    setTimeout(() => {
        tooltip.remove();
    }, 4000);
};


        let currentSortKey = null;
        let sortOrder = false;

        document.getElementById('passwordForm').addEventListener('submit', function(event) {
            event.preventDefault();
            const password = document.getElementById('password').value;
            fetch('/check-password', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ password })
            })
            .then(response => response.json())
            .then(data => {
                const p1 = document.getElementById("p1");
                const errorMessage = document.getElementById("errorMessage");
                
                if (data.error) {
                    errorMessage.innerText = data.error;
                    return;
                }

                errorMessage.innerText = '';
                p1.innerHTML = 'Пароль верный! Добро пожаловать!';
                // Меняем стиль первого элемента
                document.getElementById('activeCount').style.display = 'block';
                // Меняем стиль второго элемента
                document.getElementById('passiveCount').style.display = 'block';
                const clientList = document.getElementById("clientList");
                clientList.innerHTML = '';

                const specialIPs = [
                    ['192.168.62.139', 'Тепло-пункт'],
                    ['192.168.14.71', 'Деж. энергетик'],
                    ['192.168.4.138', 'АСУТП сервер'],
                    ['192.168.4.141', 'АСУТП лаборатория'],
                    ['192.168.4.139', 'АСУТП Начальник']
                ];

                const table = document.createElement('table');
                const thead = document.createElement('thead');
                const headerRow = document.createElement('tr');
                headerRow.innerHTML = `
                    <th onclick="sortTable('ip')">IP</th>
                    <th onclick="sortTable('count')">Всего запросов</th>
                    <th onclick="sortTable('lastRequest')">Время последнего запроса</th>
                    <th onclick="sortTable('status')">Статус</th>
                `;
                thead.appendChild(headerRow);
                table.appendChild(thead);

                const tbody = document.createElement('tbody');

                let activeCount = 0;
                let passiveCount = 0;

                data.clients.forEach(client => { 
                    if (client.active) {
                        activeCount++;
                    } else {
                        passiveCount++;
                    }
                    const clientRow = document.createElement('tr');
                    clientRow.className = client.active ? 'active' : 'inactive';

                    let ipCellContent = client.ip.replace(/^::ffff:/, '');

                    specialIPs.forEach(ipData => {
                        if (client.ip.includes(ipData[0])) {
                            ipCellContent += ` (${ipData[1]})`;
                        }
                    });

                    clientRow.innerHTML = `
                        <td>${ipCellContent}</td>
                        <td>${client.count}</td>
                        <td>${new Date(client.lastRequest).toLocaleString()}</td>
                        <td>${client.active ? 'Активен' : 'Неактивен'}</td>
                    `;

                    tbody.appendChild(clientRow);
                });

                // Обновляем счетчики
                document.getElementById('activeCount').innerText = 'Активных клиентов: ' + activeCount;
                document.getElementById('passiveCount').innerText = 'Пассивных клиентов: ' + passiveCount;

                table.appendChild(tbody);
                clientList.appendChild(table);
            })
            .catch(error => {
                console.error('Ошибка:', error);
            });
        });

        function sortTable(sortKey) {
    const tbody = document.querySelector("#clientList table tbody");
    const rows = Array.from(tbody.rows);
    
    if (currentSortKey === sortKey) {
        sortOrder = !sortOrder;
    } else {
        sortOrder = false;
    }
    currentSortKey = sortKey;

    switch (sortKey) {
        case 'ip':
            rows.sort((a, b) => compareIP(a.cells[0].innerText.replace(/^::ffff:/, ''), b.cells[0].innerText.replace(/^::ffff:/, '')));
            break;
        case 'count':
            rows.sort((a, b) => compareValues(parseInt(a.cells[1].innerText), parseInt(b.cells[1].innerText)));
            break;
        case 'lastRequest':
            rows.sort((a, b) => compareValues(new Date(a.cells[2].innerText.split(', ')[0].split('.').reverse().join('-')), new Date(b.cells[2].innerText.split(', ')[0].split('.').reverse().join('-'))));
            break;
        case 'status':
            rows.sort((a, b) => compareValues(a.cells[3].innerText.trim(), b.cells[3].innerText.trim()));
            break;
    }

    tbody.innerHTML = '';
    rows.forEach(row => tbody.appendChild(row));
}

function compareValues(a, b) {
    return sortOrder ? ((a > b) ? -1 : (a < b) ? 1 : 0) : ((a < b) ? -1 : (a > b) ? 1 : 0);
}

function compareIP(ipA, ipB) {
    const a = ipA.split('.').map(Number);
    const b = ipB.split('.').map(Number);
    for (let i = 0; i < 4; i++) {
        if (a[i] !== b[i]) {
            return sortOrder ? b[i] - a[i] : a[i] - b[i];
        }
    }
    return 0;
}

    </script>
</body>
</html>
